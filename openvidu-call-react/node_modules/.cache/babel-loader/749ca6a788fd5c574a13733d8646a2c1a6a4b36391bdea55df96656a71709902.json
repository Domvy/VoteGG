{"ast":null,"code":"import $ from 'jquery';\nclass OpenViduLayout {\n  fixAspectRatio(elem, width) {\n    const sub = elem.querySelector('.OT_root');\n    if (sub) {\n      // If this is the parent of a subscriber or publisher then we need\n      // to force the mutation observer on the publisher or subscriber to\n      // trigger to get it to fix it's layout\n      const oldWidth = sub.style.width;\n      sub.style.width = width + 'px';\n      // sub.style.height = height + 'px';\n      sub.style.width = oldWidth || '';\n    }\n  }\n  positionElement(elem, x, y, width, height, animate) {\n    const targetPosition = {\n      left: x + 'px',\n      top: y + 'px',\n      width: width + 'px',\n      height: height + 'px'\n    };\n    this.fixAspectRatio(elem, width);\n    if (animate && $) {\n      $(elem).stop();\n      $(elem).animate(targetPosition, animate.duration || 200, animate.easing || 'swing', () => {\n        this.fixAspectRatio(elem, width);\n        if (animate.complete) {\n          animate.complete.call(this);\n        }\n      });\n    } else {\n      $(elem).css(targetPosition);\n    }\n    this.fixAspectRatio(elem, width);\n  }\n  getVideoRatio(elem) {\n    if (!elem) {\n      return 3 / 4;\n    }\n    const video = elem.querySelector('video');\n    if (video && video.videoHeight && video.videoWidth) {\n      return video.videoHeight / video.videoWidth;\n    } else if (elem.videoHeight && elem.videoWidth) {\n      return elem.videoHeight / elem.videoWidth;\n    }\n    return 3 / 4;\n  }\n  getCSSNumber(elem, prop) {\n    const cssStr = $(elem).css(prop);\n    return cssStr ? parseInt(cssStr, 10) : 0;\n  }\n\n  // Really cheap UUID function\n  cheapUUID() {\n    return (Math.random() * 100000000).toFixed(0);\n  }\n  getHeight(elem) {\n    const heightStr = $(elem).css('height');\n    return heightStr ? parseInt(heightStr, 10) : 0;\n  }\n  getWidth(elem) {\n    const widthStr = $(elem).css('width');\n    return widthStr ? parseInt(widthStr, 10) : 0;\n  }\n  getBestDimensions(minR, maxR, count, WIDTH, HEIGHT, targetHeight) {\n    let maxArea, targetCols, targetRows, targetWidth, tWidth, tHeight, tRatio;\n\n    // Iterate through every possible combination of rows and columns\n    // and see which one has the least amount of whitespace\n    for (let i = 1; i <= count; i++) {\n      const colsAux = i;\n      const rowsAux = Math.ceil(count / colsAux);\n\n      // Try taking up the whole height and width\n      tHeight = Math.floor(HEIGHT / rowsAux);\n      tWidth = Math.floor(WIDTH / colsAux);\n      tRatio = tHeight / tWidth;\n      if (tRatio > maxR) {\n        // We went over decrease the height\n        tRatio = maxR;\n        tHeight = tWidth * tRatio;\n      } else if (tRatio < minR) {\n        // We went under decrease the width\n        tRatio = minR;\n        tWidth = tHeight / tRatio;\n      }\n      const area = tWidth * tHeight * count;\n\n      // If this width and height takes up the most space then we're going with that\n      if (maxArea === undefined || area > maxArea) {\n        maxArea = area;\n        targetHeight = tHeight;\n        targetWidth = tWidth;\n        targetCols = colsAux;\n        targetRows = rowsAux;\n      }\n    }\n    return {\n      maxArea: maxArea,\n      targetCols: targetCols,\n      targetRows: targetRows,\n      targetHeight: targetHeight,\n      targetWidth: targetWidth,\n      ratio: targetHeight / targetWidth\n    };\n  }\n  arrange(children, WIDTH, HEIGHT, offsetLeft, offsetTop, fixedRatio, minRatio, maxRatio, animate) {\n    let targetHeight;\n    const count = children.length;\n    let dimensions;\n    if (!fixedRatio) {\n      dimensions = this.getBestDimensions(minRatio, maxRatio, count, WIDTH, HEIGHT, targetHeight);\n    } else {\n      // Use the ratio of the first video element we find to approximate\n      const ratio = this.getVideoRatio(children.length > 0 ? children[0] : null);\n      dimensions = this.getBestDimensions(ratio, ratio, count, WIDTH, HEIGHT, targetHeight);\n    }\n\n    // Loop through each stream in the container and place it inside\n    let x = 0,\n      y = 0;\n    const rows = [];\n    let row;\n    // Iterate through the children and create an array with a new item for each row\n    // and calculate the width of each row so that we know if we go over the size and need\n    // to adjust\n    for (let i = 0; i < children.length; i++) {\n      if (i % dimensions.targetCols === 0) {\n        // This is a new row\n        row = {\n          children: [],\n          width: 0,\n          height: 0\n        };\n        rows.push(row);\n      }\n      const elem = children[i];\n      row.children.push(elem);\n      let targetWidth = dimensions.targetWidth;\n      targetHeight = dimensions.targetHeight;\n      // If we're using a fixedRatio then we need to set the correct ratio for this element\n      if (fixedRatio) {\n        targetWidth = targetHeight / this.getVideoRatio(elem);\n      }\n      row.width += targetWidth;\n      row.height = targetHeight;\n    }\n    // Calculate total row height adjusting if we go too wide\n    let totalRowHeight = 0;\n    let remainingShortRows = 0;\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      if (row.width > WIDTH) {\n        // Went over on the width, need to adjust the height proportionally\n        row.height = Math.floor(row.height * (WIDTH / row.width));\n        row.width = WIDTH;\n      } else if (row.width < WIDTH) {\n        remainingShortRows += 1;\n      }\n      totalRowHeight += row.height;\n    }\n    if (totalRowHeight < HEIGHT && remainingShortRows > 0) {\n      // We can grow some of the rows, we're not taking up the whole height\n      let remainingHeightDiff = HEIGHT - totalRowHeight;\n      totalRowHeight = 0;\n      for (let i = 0; i < rows.length; i++) {\n        row = rows[i];\n        if (row.width < WIDTH) {\n          // Evenly distribute the extra height between the short rows\n          let extraHeight = remainingHeightDiff / remainingShortRows;\n          if (extraHeight / row.height > (WIDTH - row.width) / row.width) {\n            // We can't go that big or we'll go too wide\n            extraHeight = Math.floor((WIDTH - row.width) / row.width * row.height);\n          }\n          row.width += Math.floor(extraHeight / row.height * row.width);\n          row.height += extraHeight;\n          remainingHeightDiff -= extraHeight;\n          remainingShortRows -= 1;\n        }\n        totalRowHeight += row.height;\n      }\n    }\n    // vertical centering\n    y = (HEIGHT - totalRowHeight) / 2;\n    // Iterate through each row and place each child\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      // center the row\n      const rowMarginLeft = (WIDTH - row.width) / 2;\n      x = rowMarginLeft;\n      for (let j = 0; j < row.children.length; j++) {\n        const elem = row.children[j];\n        let targetWidth = dimensions.targetWidth;\n        targetHeight = row.height;\n        // If we're using a fixedRatio then we need to set the correct ratio for this element\n        if (fixedRatio) {\n          targetWidth = Math.floor(targetHeight / this.getVideoRatio(elem));\n        }\n        elem.style.position = 'absolute';\n        // $(elem).css('position', 'absolute');\n        const actualWidth = targetWidth - this.getCSSNumber(elem, 'paddingLeft') - this.getCSSNumber(elem, 'paddingRight') - this.getCSSNumber(elem, 'marginLeft') - this.getCSSNumber(elem, 'marginRight') - this.getCSSNumber(elem, 'borderLeft') - this.getCSSNumber(elem, 'borderRight');\n        const actualHeight = targetHeight - this.getCSSNumber(elem, 'paddingTop') - this.getCSSNumber(elem, 'paddingBottom') - this.getCSSNumber(elem, 'marginTop') - this.getCSSNumber(elem, 'marginBottom') - this.getCSSNumber(elem, 'borderTop') - this.getCSSNumber(elem, 'borderBottom');\n        this.positionElement(elem, x + offsetLeft, y + offsetTop, actualWidth, actualHeight, animate);\n        x += targetWidth;\n      }\n      y += targetHeight;\n    }\n  }\n  filterDisplayNone(element) {\n    return element.style.display !== 'none';\n  }\n  updateLayout() {\n    if (this.layoutContainer.style.display === 'none') {\n      return;\n    }\n    let id = this.layoutContainer.id;\n    if (!id) {\n      id = 'OT_' + this.cheapUUID();\n      this.layoutContainer.id = id;\n    }\n    const HEIGHT = this.getHeight(this.layoutContainer) - this.getCSSNumber(this.layoutContainer, 'borderTop') - this.getCSSNumber(this.layoutContainer, 'borderBottom');\n    const WIDTH = this.getWidth(this.layoutContainer) - this.getCSSNumber(this.layoutContainer, 'borderLeft') - this.getCSSNumber(this.layoutContainer, 'borderRight');\n    const availableRatio = HEIGHT / WIDTH;\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    let bigOffsetTop = 0;\n    let bigOffsetLeft = 0;\n    const bigOnes = Array.prototype.filter.call(this.layoutContainer.querySelectorAll('#' + id + '>.' + this.opts.bigClass), this.filterDisplayNone);\n    const smallOnes = Array.prototype.filter.call(this.layoutContainer.querySelectorAll('#' + id + '>*:not(.' + this.opts.bigClass + ')'), this.filterDisplayNone);\n    if (bigOnes.length > 0 && smallOnes.length > 0) {\n      let bigWidth, bigHeight;\n      if (availableRatio > this.getVideoRatio(bigOnes[0])) {\n        // We are tall, going to take up the whole width and arrange small\n        // guys at the bottom\n        bigWidth = WIDTH;\n        bigHeight = Math.floor(HEIGHT * this.opts.bigPercentage);\n        offsetTop = bigHeight;\n        bigOffsetTop = HEIGHT - offsetTop;\n      } else {\n        // We are wide, going to take up the whole height and arrange the small\n        // guys on the right\n        bigHeight = HEIGHT;\n        bigWidth = Math.floor(WIDTH * this.opts.bigPercentage);\n        offsetLeft = bigWidth;\n        bigOffsetLeft = WIDTH - offsetLeft;\n      }\n      if (this.opts.bigFirst) {\n        this.arrange(bigOnes, bigWidth, bigHeight, 0, 0, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n        this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, offsetLeft, offsetTop, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n      } else {\n        this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, 0, 0, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n        this.arrange(bigOnes, bigWidth, bigHeight, bigOffsetLeft, bigOffsetTop, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n      }\n    } else if (bigOnes.length > 0 && smallOnes.length === 0) {\n      this\n      // We only have one bigOne just center it\n      .arrange(bigOnes, WIDTH, HEIGHT, 0, 0, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n    } else {\n      this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, offsetLeft, offsetTop, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n    }\n  }\n  initLayoutContainer(container, opts) {\n    this.opts = {\n      maxRatio: opts.maxRatio != null ? opts.maxRatio : 3 / 2,\n      minRatio: opts.minRatio != null ? opts.minRatio : 9 / 16,\n      fixedRatio: opts.fixedRatio != null ? opts.fixedRatio : false,\n      animate: opts.animate != null ? opts.animate : false,\n      bigClass: opts.bigClass != null ? opts.bigClass : 'OT_big',\n      bigPercentage: opts.bigPercentage != null ? opts.bigPercentage : 0.8,\n      bigFixedRatio: opts.bigFixedRatio != null ? opts.bigFixedRatio : false,\n      bigMaxRatio: opts.bigMaxRatio != null ? opts.bigMaxRatio : 3 / 2,\n      bigMinRatio: opts.bigMinRatio != null ? opts.bigMinRatio : 9 / 16,\n      bigFirst: opts.bigFirst != null ? opts.bigFirst : true\n    };\n    this.layoutContainer = typeof container === 'string' ? $(container) : container;\n  }\n  setLayoutOptions(options) {\n    this.opts = options;\n  }\n}\nexport default OpenViduLayout;","map":{"version":3,"names":["$","OpenViduLayout","fixAspectRatio","elem","width","sub","querySelector","oldWidth","style","positionElement","x","y","height","animate","targetPosition","left","top","stop","duration","easing","complete","call","css","getVideoRatio","video","videoHeight","videoWidth","getCSSNumber","prop","cssStr","parseInt","cheapUUID","Math","random","toFixed","getHeight","heightStr","getWidth","widthStr","getBestDimensions","minR","maxR","count","WIDTH","HEIGHT","targetHeight","maxArea","targetCols","targetRows","targetWidth","tWidth","tHeight","tRatio","i","colsAux","rowsAux","ceil","floor","area","undefined","ratio","arrange","children","offsetLeft","offsetTop","fixedRatio","minRatio","maxRatio","length","dimensions","rows","row","push","totalRowHeight","remainingShortRows","remainingHeightDiff","extraHeight","rowMarginLeft","j","position","actualWidth","actualHeight","filterDisplayNone","element","display","updateLayout","layoutContainer","id","availableRatio","bigOffsetTop","bigOffsetLeft","bigOnes","Array","prototype","filter","querySelectorAll","opts","bigClass","smallOnes","bigWidth","bigHeight","bigPercentage","bigFirst","bigFixedRatio","bigMinRatio","bigMaxRatio","initLayoutContainer","container","setLayoutOptions","options"],"sources":["/home/ubuntu/Project-Agora/openvidu-call-react/src/layout/openvidu-layout.js"],"sourcesContent":["import $ from 'jquery';\n\nclass OpenViduLayout {\n  layoutContainer;\n  opts ;\n\n  fixAspectRatio(elem, width) {\n    const sub = elem.querySelector('.OT_root');\n    if (sub) {\n      // If this is the parent of a subscriber or publisher then we need\n      // to force the mutation observer on the publisher or subscriber to\n      // trigger to get it to fix it's layout\n      const oldWidth = sub.style.width;\n      sub.style.width = width + 'px';\n      // sub.style.height = height + 'px';\n      sub.style.width = oldWidth || '';\n    }\n  }\n\n positionElement(elem, x, y, width, height, animate) {\n    const targetPosition = {\n      left: x + 'px',\n      top: y + 'px',\n      width: width + 'px',\n      height: height + 'px',\n    };\n\n    this.fixAspectRatio(elem, width);\n\n    if (animate && $) {\n      $(elem).stop();\n      $(elem).animate(targetPosition, animate.duration || 200, animate.easing || 'swing', () => {\n        this.fixAspectRatio(elem, width);\n        if (animate.complete) {\n          animate.complete.call(this);\n        }\n      });\n    } else {\n      $(elem).css(targetPosition);\n    }\n    this.fixAspectRatio(elem, width);\n  }\n\n  getVideoRatio(elem) {\n    if (!elem) {\n      return 3 / 4;\n    }\n    const video = elem.querySelector('video');\n    if (video && video.videoHeight && video.videoWidth) {\n      return video.videoHeight / video.videoWidth;\n    } else if (elem.videoHeight && elem.videoWidth) {\n      return elem.videoHeight / elem.videoWidth;\n    }\n    return 3 / 4;\n  }\n\n   getCSSNumber(elem, prop) {\n    const cssStr = $(elem).css(prop);\n    return cssStr ? parseInt(cssStr, 10) : 0;\n  }\n\n  // Really cheap UUID function\n   cheapUUID() {\n    return (Math.random() * 100000000).toFixed(0);\n  }\n\n   getHeight(elem) {\n    const heightStr = $(elem).css('height');\n    return heightStr ? parseInt(heightStr, 10) : 0;\n  }\n\n   getWidth(elem) {\n    const widthStr = $(elem).css('width');\n    return widthStr ? parseInt(widthStr, 10) : 0;\n  }\n\n   getBestDimensions(minR , maxR , count , WIDTH, HEIGHT, targetHeight) {\n    let maxArea, targetCols, targetRows, targetWidth, tWidth, tHeight, tRatio;\n\n    // Iterate through every possible combination of rows and columns\n    // and see which one has the least amount of whitespace\n    for (let i = 1; i <= count; i++) {\n      const colsAux = i;\n      const rowsAux = Math.ceil(count / colsAux);\n\n      // Try taking up the whole height and width\n      tHeight = Math.floor(HEIGHT / rowsAux);\n      tWidth = Math.floor(WIDTH / colsAux);\n\n      tRatio = tHeight / tWidth;\n      if (tRatio > maxR) {\n        // We went over decrease the height\n        tRatio = maxR;\n        tHeight = tWidth * tRatio;\n      } else if (tRatio < minR) {\n        // We went under decrease the width\n        tRatio = minR;\n        tWidth = tHeight / tRatio;\n      }\n\n      const area = tWidth * tHeight * count;\n\n      // If this width and height takes up the most space then we're going with that\n      if (maxArea === undefined || area > maxArea) {\n        maxArea = area;\n        targetHeight = tHeight;\n        targetWidth = tWidth;\n        targetCols = colsAux;\n        targetRows = rowsAux;\n      }\n    }\n    return {\n      maxArea: maxArea,\n      targetCols: targetCols,\n      targetRows: targetRows,\n      targetHeight: targetHeight,\n      targetWidth: targetWidth,\n      ratio: targetHeight / targetWidth,\n    };\n  }\n\n   arrange(\n    children,\n    WIDTH,\n    HEIGHT,\n    offsetLeft,\n    offsetTop,\n    fixedRatio,\n    minRatio,\n    maxRatio,\n    animate,\n  ) {\n    let targetHeight;\n\n    const count = children.length;\n    let dimensions;\n\n    if (!fixedRatio) {\n      dimensions = this.getBestDimensions(minRatio, maxRatio, count, WIDTH, HEIGHT, targetHeight);\n    } else {\n      // Use the ratio of the first video element we find to approximate\n      const ratio = this.getVideoRatio(children.length > 0 ? children[0] : null);\n      dimensions = this.getBestDimensions(ratio, ratio, count, WIDTH, HEIGHT, targetHeight);\n    }\n\n    // Loop through each stream in the container and place it inside\n    let x = 0,\n      y = 0;\n    const rows = [];\n    let row;\n    // Iterate through the children and create an array with a new item for each row\n    // and calculate the width of each row so that we know if we go over the size and need\n    // to adjust\n    for (let i = 0; i < children.length; i++) {\n      if (i % dimensions.targetCols === 0) {\n        // This is a new row\n        row = {\n          children: [],\n          width: 0,\n          height: 0,\n        };\n        rows.push(row);\n      }\n      const elem = children[i];\n      row.children.push(elem);\n      let targetWidth = dimensions.targetWidth;\n      targetHeight = dimensions.targetHeight;\n      // If we're using a fixedRatio then we need to set the correct ratio for this element\n      if (fixedRatio) {\n        targetWidth = targetHeight / this.getVideoRatio(elem);\n      }\n      row.width += targetWidth;\n      row.height = targetHeight;\n    }\n    // Calculate total row height adjusting if we go too wide\n    let totalRowHeight = 0;\n    let remainingShortRows = 0;\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      if (row.width > WIDTH) {\n        // Went over on the width, need to adjust the height proportionally\n        row.height = Math.floor(row.height * (WIDTH / row.width));\n        row.width = WIDTH;\n      } else if (row.width < WIDTH) {\n        remainingShortRows += 1;\n      }\n      totalRowHeight += row.height;\n    }\n    if (totalRowHeight < HEIGHT && remainingShortRows > 0) {\n      // We can grow some of the rows, we're not taking up the whole height\n      let remainingHeightDiff = HEIGHT - totalRowHeight;\n      totalRowHeight = 0;\n      for (let i = 0; i < rows.length; i++) {\n        row = rows[i];\n        if (row.width < WIDTH) {\n          // Evenly distribute the extra height between the short rows\n          let extraHeight = remainingHeightDiff / remainingShortRows;\n          if (extraHeight / row.height > (WIDTH - row.width) / row.width) {\n            // We can't go that big or we'll go too wide\n            extraHeight = Math.floor((WIDTH - row.width) / row.width * row.height);\n          }\n          row.width += Math.floor(extraHeight / row.height * row.width);\n          row.height += extraHeight;\n          remainingHeightDiff -= extraHeight;\n          remainingShortRows -= 1;\n        }\n        totalRowHeight += row.height;\n      }\n    }\n    // vertical centering\n    y = (HEIGHT - totalRowHeight) / 2;\n    // Iterate through each row and place each child\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      // center the row\n      const rowMarginLeft = (WIDTH - row.width) / 2;\n      x = rowMarginLeft;\n      for (let j = 0; j < row.children.length; j++) {\n        const elem = row.children[j];\n\n        let targetWidth = dimensions.targetWidth;\n        targetHeight = row.height;\n        // If we're using a fixedRatio then we need to set the correct ratio for this element\n        if (fixedRatio) {\n          targetWidth = Math.floor(targetHeight / this.getVideoRatio(elem));\n        }\n        elem.style.position = 'absolute';\n        // $(elem).css('position', 'absolute');\n        const actualWidth =\n          targetWidth -\n          this.getCSSNumber(elem, 'paddingLeft') -\n          this.getCSSNumber(elem, 'paddingRight') -\n          this.getCSSNumber(elem, 'marginLeft') -\n          this.getCSSNumber(elem, 'marginRight') -\n          this.getCSSNumber(elem, 'borderLeft') -\n          this.getCSSNumber(elem, 'borderRight');\n\n        const actualHeight =\n          targetHeight -\n          this.getCSSNumber(elem, 'paddingTop') -\n          this.getCSSNumber(elem, 'paddingBottom') -\n          this.getCSSNumber(elem, 'marginTop') -\n          this.getCSSNumber(elem, 'marginBottom') -\n          this.getCSSNumber(elem, 'borderTop') -\n          this.getCSSNumber(elem, 'borderBottom');\n\n        this.positionElement(elem, x + offsetLeft, y + offsetTop, actualWidth, actualHeight, animate);\n        x += targetWidth;\n      }\n      y += targetHeight;\n    }\n  }\n\n filterDisplayNone(element) {\n    return element.style.display !== 'none';\n  }\n\n  updateLayout() {\n    if (this.layoutContainer.style.display === 'none') {\n      return;\n    }\n    let id = this.layoutContainer.id;\n    if (!id) {\n      id = 'OT_' + this.cheapUUID();\n      this.layoutContainer.id = id;\n    }\n\n    const HEIGHT =\n      this.getHeight(this.layoutContainer) -\n      this.getCSSNumber(this.layoutContainer, 'borderTop') -\n      this.getCSSNumber(this.layoutContainer, 'borderBottom');\n    const WIDTH =\n      this.getWidth(this.layoutContainer) -\n      this.getCSSNumber(this.layoutContainer, 'borderLeft') -\n      this.getCSSNumber(this.layoutContainer, 'borderRight');\n\n    const availableRatio = HEIGHT / WIDTH;\n\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    let bigOffsetTop = 0;\n    let bigOffsetLeft = 0;\n\n    const bigOnes = Array.prototype.filter.call(\n      this.layoutContainer.querySelectorAll('#' + id + '>.' + this.opts.bigClass),\n      this.filterDisplayNone,\n    );\n    const smallOnes = Array.prototype.filter.call(\n      this.layoutContainer.querySelectorAll('#' + id + '>*:not(.' + this.opts.bigClass + ')'),\n      this.filterDisplayNone,\n    );\n\n    if (bigOnes.length > 0 && smallOnes.length > 0) {\n      let bigWidth, bigHeight;\n\n      if (availableRatio > this.getVideoRatio(bigOnes[0])) {\n        // We are tall, going to take up the whole width and arrange small\n        // guys at the bottom\n        bigWidth = WIDTH;\n        bigHeight = Math.floor(HEIGHT * this.opts.bigPercentage);\n        offsetTop = bigHeight;\n        bigOffsetTop = HEIGHT - offsetTop;\n      } else {\n        // We are wide, going to take up the whole height and arrange the small\n        // guys on the right\n        bigHeight = HEIGHT;\n        bigWidth = Math.floor(WIDTH * this.opts.bigPercentage);\n        offsetLeft = bigWidth;\n        bigOffsetLeft = WIDTH - offsetLeft;\n      }\n      if (this.opts.bigFirst) {\n        this.arrange(\n          bigOnes,\n          bigWidth,\n          bigHeight,\n          0,\n          0,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n        this.arrange(\n          smallOnes,\n          WIDTH - offsetLeft,\n          HEIGHT - offsetTop,\n          offsetLeft,\n          offsetTop,\n          this.opts.fixedRatio,\n          this.opts.minRatio,\n          this.opts.maxRatio,\n          this.opts.animate,\n        );\n      } else {\n        this.arrange(\n          smallOnes,\n          WIDTH - offsetLeft,\n          HEIGHT - offsetTop,\n          0,\n          0,\n          this.opts.fixedRatio,\n          this.opts.minRatio,\n          this.opts.maxRatio,\n          this.opts.animate,\n        );\n        this.arrange(\n          bigOnes,\n          bigWidth,\n          bigHeight,\n          bigOffsetLeft,\n          bigOffsetTop,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n      }\n    } else if (bigOnes.length > 0 && smallOnes.length === 0) {\n      this\n        // We only have one bigOne just center it\n        .arrange(\n          bigOnes,\n          WIDTH,\n          HEIGHT,\n          0,\n          0,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n    } else {\n      this.arrange(\n        smallOnes,\n        WIDTH - offsetLeft,\n        HEIGHT - offsetTop,\n        offsetLeft,\n        offsetTop,\n        this.opts.fixedRatio,\n        this.opts.minRatio,\n        this.opts.maxRatio,\n        this.opts.animate,\n      );\n    }\n  }\n\n  initLayoutContainer(container, opts) {\n    this.opts = {\n      maxRatio: opts.maxRatio != null ? opts.maxRatio : 3 / 2,\n      minRatio: opts.minRatio != null ? opts.minRatio : 9 / 16,\n      fixedRatio: opts.fixedRatio != null ? opts.fixedRatio : false,\n      animate: opts.animate != null ? opts.animate : false,\n      bigClass: opts.bigClass != null ? opts.bigClass : 'OT_big',\n      bigPercentage: opts.bigPercentage != null ? opts.bigPercentage : 0.8,\n      bigFixedRatio: opts.bigFixedRatio != null ? opts.bigFixedRatio : false,\n      bigMaxRatio: opts.bigMaxRatio != null ? opts.bigMaxRatio : 3 / 2,\n      bigMinRatio: opts.bigMinRatio != null ? opts.bigMinRatio : 9 / 16,\n      bigFirst: opts.bigFirst != null ? opts.bigFirst : true,\n    };\n    this.layoutContainer = typeof container === 'string' ? $(container) : container;\n  }\n\n  setLayoutOptions(options) {\n    this.opts = options;\n  }\n}\nexport default OpenViduLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}