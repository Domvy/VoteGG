{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Project-Agora/openvidu-call-react/src/components/VideoRoomComponent.js\";\nimport axios from 'axios';\nimport { OpenVidu } from 'openvidu-browser';\nimport React, { Component } from 'react';\nimport ChatComponent from './chat/ChatComponent';\nimport DialogExtensionComponent from './dialog-extension/DialogExtension';\nimport StreamComponent from './stream/StreamComponent';\nimport './VideoRoomComponent.css';\nimport OpenViduLayout from '../layout/openvidu-layout';\nimport UserModel from '../models/user-model';\nimport ToolbarComponent from './toolbar/ToolbarComponent';\nvar localUser = new UserModel();\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? 'http://localhost:5000/' : 'http://localhost:5000/';\nclass VideoRoomComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.hasBeenUpdated = false;\n    this.layout = new OpenViduLayout();\n    let sessionName = this.props.sessionName ? this.props.sessionName : 'SessionA';\n    let userName = this.props.user ? this.props.user : 'OpenVidu_User' + Math.floor(Math.random() * 100);\n    this.remotes = [];\n    this.localUserAccessAllowed = false;\n    this.state = {\n      mySessionId: sessionName,\n      myUserName: userName,\n      session: undefined,\n      localUser: undefined,\n      subscribers: [],\n      chatDisplay: 'none',\n      currentVideoDevice: undefined\n    };\n    this.joinSession = this.joinSession.bind(this);\n    this.leaveSession = this.leaveSession.bind(this);\n    this.onbeforeunload = this.onbeforeunload.bind(this);\n    this.updateLayout = this.updateLayout.bind(this);\n    this.camStatusChanged = this.camStatusChanged.bind(this);\n    this.micStatusChanged = this.micStatusChanged.bind(this);\n    this.nicknameChanged = this.nicknameChanged.bind(this);\n    this.toggleFullscreen = this.toggleFullscreen.bind(this);\n    this.switchCamera = this.switchCamera.bind(this);\n    this.screenShare = this.screenShare.bind(this);\n    this.stopScreenShare = this.stopScreenShare.bind(this);\n    this.closeDialogExtension = this.closeDialogExtension.bind(this);\n    this.toggleChat = this.toggleChat.bind(this);\n    this.checkNotification = this.checkNotification.bind(this);\n    this.checkSize = this.checkSize.bind(this);\n  }\n  componentDidMount() {\n    const openViduLayoutOptions = {\n      maxRatio: 3 / 2,\n      // The narrowest ratio that will be used (default 2x3)\n      minRatio: 9 / 16,\n      // The widest ratio that will be used (default 16x9)\n      fixedRatio: false,\n      // If this is true then the aspect ratio of the video is maintained and minRatio and maxRatio are ignored (default false)\n      bigClass: 'OV_big',\n      // The class to add to elements that should be sized bigger\n      bigPercentage: 0.8,\n      // The maximum percentage of space the big ones should take up\n      bigFixedRatio: false,\n      // fixedRatio for the big ones\n      bigMaxRatio: 3 / 2,\n      // The narrowest ratio to use for the big elements (default 2x3)\n      bigMinRatio: 9 / 16,\n      // The widest ratio to use for the big elements (default 16x9)\n      bigFirst: true,\n      // Whether to place the big one in the top left (true) or bottom right\n      animate: true // Whether you want to animate the transitions\n    };\n    this.layout.initLayoutContainer(document.getElementById('layout'), openViduLayoutOptions);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    window.addEventListener('resize', this.updateLayout);\n    window.addEventListener('resize', this.checkSize);\n    this.joinSession();\n  }\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    window.removeEventListener('resize', this.updateLayout);\n    window.removeEventListener('resize', this.checkSize);\n    this.leaveSession();\n  }\n  onbeforeunload(event) {\n    this.leaveSession();\n  }\n  joinSession() {\n    this.OV = new OpenVidu();\n    this.setState({\n      session: this.OV.initSession()\n    }, async () => {\n      this.subscribeToStreamCreated();\n      await this.connectToSession();\n    });\n  }\n  async connectToSession() {\n    if (this.props.token !== undefined) {\n      console.log('token received: ', this.props.token);\n      this.connect(this.props.token);\n    } else {\n      try {\n        var token = await this.getToken();\n        console.log(token);\n        this.connect(token);\n      } catch (error) {\n        console.error('There was an error getting the token:', error.code, error.message);\n        if (this.props.error) {\n          this.props.error({\n            error: error.error,\n            messgae: error.message,\n            code: error.code,\n            status: error.status\n          });\n        }\n        alert('There was an error getting the token:', error.message);\n      }\n    }\n  }\n  connect(token) {\n    this.state.session.connect(token, {\n      clientData: this.state.myUserName\n    }).then(() => {\n      this.connectWebCam();\n    }).catch(error => {\n      if (this.props.error) {\n        this.props.error({\n          error: error.error,\n          messgae: error.message,\n          code: error.code,\n          status: error.status\n        });\n      }\n      alert('There was an error connecting to the session:', error.message);\n      console.log('There was an error connecting to the session:', error.code, error.message);\n    });\n  }\n  async connectWebCam() {\n    await this.OV.getUserMedia({\n      audioSource: undefined,\n      videoSource: undefined\n    });\n    var devices = await this.OV.getDevices();\n    var videoDevices = devices.filter(device => device.kind === 'videoinput');\n    let publisher = this.OV.initPublisher(undefined, {\n      audioSource: undefined,\n      videoSource: videoDevices[0].deviceId,\n      publishAudio: localUser.isAudioActive(),\n      publishVideo: localUser.isVideoActive(),\n      resolution: '640x480',\n      frameRate: 30,\n      insertMode: 'APPEND'\n    });\n    if (this.state.session.capabilities.publish) {\n      publisher.on('accessAllowed', () => {\n        this.state.session.publish(publisher).then(() => {\n          this.updateSubscribers();\n          this.localUserAccessAllowed = true;\n          if (this.props.joinSession) {\n            this.props.joinSession();\n          }\n        });\n      });\n    }\n    localUser.setNickname(this.state.myUserName);\n    localUser.setConnectionId(this.state.session.connection.connectionId);\n    localUser.setScreenShareActive(false);\n    localUser.setStreamManager(publisher);\n    this.subscribeToUserChanged();\n    this.subscribeToStreamDestroyed();\n    this.sendSignalUserChanged({\n      isScreenShareActive: localUser.isScreenShareActive()\n    });\n    this.setState({\n      currentVideoDevice: videoDevices[0],\n      localUser: localUser\n    }, () => {\n      this.state.localUser.getStreamManager().on('streamPlaying', e => {\n        this.updateLayout();\n        publisher.videos[0].video.parentElement.classList.remove('custom-class');\n      });\n    });\n  }\n  updateSubscribers() {\n    var subscribers = this.remotes;\n    this.setState({\n      subscribers: subscribers\n    }, () => {\n      if (this.state.localUser) {\n        this.sendSignalUserChanged({\n          isAudioActive: this.state.localUser.isAudioActive(),\n          isVideoActive: this.state.localUser.isVideoActive(),\n          nickname: this.state.localUser.getNickname(),\n          isScreenShareActive: this.state.localUser.isScreenShareActive()\n        });\n      }\n      this.updateLayout();\n    });\n  }\n  leaveSession() {\n    const mySession = this.state.session;\n    if (mySession) {\n      mySession.disconnect();\n    }\n\n    // Empty all properties...\n    this.OV = null;\n    this.setState({\n      session: undefined,\n      subscribers: [],\n      mySessionId: 'SessionA',\n      myUserName: 'OpenVidu_User' + Math.floor(Math.random() * 100),\n      localUser: undefined\n    });\n    if (this.props.leaveSession) {\n      this.props.leaveSession();\n    }\n  }\n  camStatusChanged() {\n    localUser.setVideoActive(!localUser.isVideoActive());\n    localUser.getStreamManager().publishVideo(localUser.isVideoActive());\n    this.sendSignalUserChanged({\n      isVideoActive: localUser.isVideoActive()\n    });\n    this.setState({\n      localUser: localUser\n    });\n  }\n  micStatusChanged() {\n    localUser.setAudioActive(!localUser.isAudioActive());\n    localUser.getStreamManager().publishAudio(localUser.isAudioActive());\n    this.sendSignalUserChanged({\n      isAudioActive: localUser.isAudioActive()\n    });\n    this.setState({\n      localUser: localUser\n    });\n  }\n  nicknameChanged(nickname) {\n    let localUser = this.state.localUser;\n    localUser.setNickname(nickname);\n    this.setState({\n      localUser: localUser\n    });\n    this.sendSignalUserChanged({\n      nickname: this.state.localUser.getNickname()\n    });\n  }\n  deleteSubscriber(stream) {\n    const remoteUsers = this.state.subscribers;\n    const userStream = remoteUsers.filter(user => user.getStreamManager().stream === stream)[0];\n    let index = remoteUsers.indexOf(userStream, 0);\n    if (index > -1) {\n      remoteUsers.splice(index, 1);\n      this.setState({\n        subscribers: remoteUsers\n      });\n    }\n  }\n  subscribeToStreamCreated() {\n    this.state.session.on('streamCreated', event => {\n      const subscriber = this.state.session.subscribe(event.stream, undefined);\n      // var subscribers = this.state.subscribers;\n      subscriber.on('streamPlaying', e => {\n        this.checkSomeoneShareScreen();\n        subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n      });\n      const newUser = new UserModel();\n      newUser.setStreamManager(subscriber);\n      newUser.setConnectionId(event.stream.connection.connectionId);\n      newUser.setType('remote');\n      const nickname = event.stream.connection.data.split('%')[0];\n      newUser.setNickname(JSON.parse(nickname).clientData);\n      this.remotes.push(newUser);\n      if (this.localUserAccessAllowed) {\n        this.updateSubscribers();\n      }\n    });\n  }\n  subscribeToStreamDestroyed() {\n    // On every Stream destroyed...\n    this.state.session.on('streamDestroyed', event => {\n      // Remove the stream from 'subscribers' array\n      this.deleteSubscriber(event.stream);\n      setTimeout(() => {\n        this.checkSomeoneShareScreen();\n      }, 20);\n      event.preventDefault();\n      this.updateLayout();\n    });\n  }\n  subscribeToUserChanged() {\n    this.state.session.on('signal:userChanged', event => {\n      let remoteUsers = this.state.subscribers;\n      remoteUsers.forEach(user => {\n        if (user.getConnectionId() === event.from.connectionId) {\n          const data = JSON.parse(event.data);\n          console.log('EVENTO REMOTE: ', event.data);\n          if (data.isAudioActive !== undefined) {\n            user.setAudioActive(data.isAudioActive);\n          }\n          if (data.isVideoActive !== undefined) {\n            user.setVideoActive(data.isVideoActive);\n          }\n          if (data.nickname !== undefined) {\n            user.setNickname(data.nickname);\n          }\n          if (data.isScreenShareActive !== undefined) {\n            user.setScreenShareActive(data.isScreenShareActive);\n          }\n        }\n      });\n      this.setState({\n        subscribers: remoteUsers\n      }, () => this.checkSomeoneShareScreen());\n    });\n  }\n  updateLayout() {\n    setTimeout(() => {\n      this.layout.updateLayout();\n    }, 20);\n  }\n  sendSignalUserChanged(data) {\n    const signalOptions = {\n      data: JSON.stringify(data),\n      type: 'userChanged'\n    };\n    this.state.session.signal(signalOptions);\n  }\n  toggleFullscreen() {\n    const document = window.document;\n    const fs = document.getElementById('container');\n    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {\n      if (fs.requestFullscreen) {\n        fs.requestFullscreen();\n      } else if (fs.msRequestFullscreen) {\n        fs.msRequestFullscreen();\n      } else if (fs.mozRequestFullScreen) {\n        fs.mozRequestFullScreen();\n      } else if (fs.webkitRequestFullscreen) {\n        fs.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      }\n    }\n  }\n  async switchCamera() {\n    try {\n      const devices = await this.OV.getDevices();\n      var videoDevices = devices.filter(device => device.kind === 'videoinput');\n      if (videoDevices && videoDevices.length > 1) {\n        var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId);\n        if (newVideoDevice.length > 0) {\n          // Creating a new publisher with specific videoSource\n          // In mobile devices the default and first camera is the front one\n          var newPublisher = this.OV.initPublisher(undefined, {\n            audioSource: undefined,\n            videoSource: newVideoDevice[0].deviceId,\n            publishAudio: localUser.isAudioActive(),\n            publishVideo: localUser.isVideoActive(),\n            mirror: true\n          });\n\n          //newPublisher.once(\"accessAllowed\", () => {\n          await this.state.session.unpublish(this.state.localUser.getStreamManager());\n          await this.state.session.publish(newPublisher);\n          this.state.localUser.setStreamManager(newPublisher);\n          this.setState({\n            currentVideoDevice: newVideoDevice,\n            localUser: localUser\n          });\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  screenShare() {\n    const videoSource = navigator.userAgent.indexOf('Firefox') !== -1 ? 'window' : 'screen';\n    const publisher = this.OV.initPublisher(undefined, {\n      videoSource: videoSource,\n      publishAudio: localUser.isAudioActive(),\n      publishVideo: localUser.isVideoActive(),\n      mirror: false\n    }, error => {\n      if (error && error.name === 'SCREEN_EXTENSION_NOT_INSTALLED') {\n        this.setState({\n          showExtensionDialog: true\n        });\n      } else if (error && error.name === 'SCREEN_SHARING_NOT_SUPPORTED') {\n        alert('Your browser does not support screen sharing');\n      } else if (error && error.name === 'SCREEN_EXTENSION_DISABLED') {\n        alert('You need to enable screen sharing extension');\n      } else if (error && error.name === 'SCREEN_CAPTURE_DENIED') {\n        alert('You need to choose a window or application to share');\n      }\n    });\n    publisher.once('accessAllowed', () => {\n      this.state.session.unpublish(localUser.getStreamManager());\n      localUser.setStreamManager(publisher);\n      this.state.session.publish(localUser.getStreamManager()).then(() => {\n        localUser.setScreenShareActive(true);\n        this.setState({\n          localUser: localUser\n        }, () => {\n          this.sendSignalUserChanged({\n            isScreenShareActive: localUser.isScreenShareActive()\n          });\n        });\n      });\n    });\n    publisher.on('streamPlaying', () => {\n      this.updateLayout();\n      publisher.videos[0].video.parentElement.classList.remove('custom-class');\n    });\n  }\n  closeDialogExtension() {\n    this.setState({\n      showExtensionDialog: false\n    });\n  }\n  stopScreenShare() {\n    this.state.session.unpublish(localUser.getStreamManager());\n    this.connectWebCam();\n  }\n  checkSomeoneShareScreen() {\n    let isScreenShared;\n    // return true if at least one passes the test\n    isScreenShared = this.state.subscribers.some(user => user.isScreenShareActive()) || localUser.isScreenShareActive();\n    const openviduLayoutOptions = {\n      maxRatio: 3 / 2,\n      minRatio: 9 / 16,\n      fixedRatio: isScreenShared,\n      bigClass: 'OV_big',\n      bigPercentage: 0.8,\n      bigFixedRatio: false,\n      bigMaxRatio: 3 / 2,\n      bigMinRatio: 9 / 16,\n      bigFirst: true,\n      animate: true\n    };\n    this.layout.setLayoutOptions(openviduLayoutOptions);\n    this.updateLayout();\n  }\n  toggleChat(property) {\n    let display = property;\n    if (display === undefined) {\n      display = this.state.chatDisplay === 'none' ? 'block' : 'none';\n    }\n    if (display === 'block') {\n      this.setState({\n        chatDisplay: display,\n        messageReceived: false\n      });\n    } else {\n      console.log('chat', display);\n      this.setState({\n        chatDisplay: display\n      });\n    }\n    this.updateLayout();\n  }\n  checkNotification(event) {\n    this.setState({\n      messageReceived: this.state.chatDisplay === 'none'\n    });\n  }\n  checkSize() {\n    if (document.getElementById('layout').offsetWidth <= 700 && !this.hasBeenUpdated) {\n      this.toggleChat('none');\n      this.hasBeenUpdated = true;\n    }\n    if (document.getElementById('layout').offsetWidth > 700 && this.hasBeenUpdated) {\n      this.hasBeenUpdated = false;\n    }\n  }\n  render() {\n    const mySessionId = this.state.mySessionId;\n    const localUser = this.state.localUser;\n    var chatDisplay = {\n      display: this.state.chatDisplay\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      id: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ToolbarComponent, {\n      sessionId: mySessionId,\n      user: localUser,\n      showNotification: this.state.messageReceived,\n      camStatusChanged: this.camStatusChanged,\n      micStatusChanged: this.micStatusChanged,\n      screenShare: this.screenShare,\n      stopScreenShare: this.stopScreenShare,\n      toggleFullscreen: this.toggleFullscreen,\n      switchCamera: this.switchCamera,\n      leaveSession: this.leaveSession,\n      toggleChat: this.toggleChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(DialogExtensionComponent, {\n      showDialog: this.state.showExtensionDialog,\n      cancelClicked: this.closeDialogExtension,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"layout\",\n      className: \"bounds\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 17\n      }\n    }, localUser !== undefined && localUser.getStreamManager() !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"OT_root OT_publisher custom-class\",\n      id: \"localUser\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(StreamComponent, {\n      user: localUser,\n      handleNickname: this.nicknameChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 29\n      }\n    })), this.state.subscribers.map((sub, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"OT_root OT_publisher custom-class\",\n      id: \"remoteUsers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(StreamComponent, {\n      user: sub,\n      streamId: sub.streamManager.stream.streamId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 29\n      }\n    }))), localUser !== undefined && localUser.getStreamManager() !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"OT_root OT_publisher custom-class\",\n      style: chatDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ChatComponent, {\n      user: localUser,\n      chatDisplay: this.state.chatDisplay,\n      close: this.toggleChat,\n      messageReceived: this.checkNotification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 29\n      }\n    }))));\n  }\n\n  /**\n   * --------------------------------------------\n   * GETTING A TOKEN FROM YOUR APPLICATION SERVER\n   * --------------------------------------------\n   * The methods below request the creation of a Session and a Token to\n   * your application server. This keeps your OpenVidu deployment secure.\n   *\n   * In this sample code, there is no user control at all. Anybody could\n   * access your application server endpoints! In a real production\n   * environment, your application server must identify the user to allow\n   * access to the endpoints.\n   *\n   * Visit https://docs.openvidu.io/en/stable/application-server to learn\n   * more about the integration of OpenVidu in your application server.\n   */\n  async getToken() {\n    const sessionId = await this.createSession(this.state.mySessionId);\n    return await this.createToken(sessionId);\n  }\n  async createSession(sessionId) {\n    const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions', {\n      customSessionId: sessionId\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data; // The sessionId\n  }\n  async createToken(sessionId) {\n    const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions/' + sessionId + '/connections', {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data; // The token\n  }\n}\nexport default VideoRoomComponent;","map":{"version":3,"names":["axios","OpenVidu","React","Component","ChatComponent","DialogExtensionComponent","StreamComponent","OpenViduLayout","UserModel","ToolbarComponent","localUser","APPLICATION_SERVER_URL","process","env","NODE_ENV","VideoRoomComponent","constructor","props","hasBeenUpdated","layout","sessionName","userName","user","Math","floor","random","remotes","localUserAccessAllowed","state","mySessionId","myUserName","session","undefined","subscribers","chatDisplay","currentVideoDevice","joinSession","bind","leaveSession","onbeforeunload","updateLayout","camStatusChanged","micStatusChanged","nicknameChanged","toggleFullscreen","switchCamera","screenShare","stopScreenShare","closeDialogExtension","toggleChat","checkNotification","checkSize","componentDidMount","openViduLayoutOptions","maxRatio","minRatio","fixedRatio","bigClass","bigPercentage","bigFixedRatio","bigMaxRatio","bigMinRatio","bigFirst","animate","initLayoutContainer","document","getElementById","window","addEventListener","componentWillUnmount","removeEventListener","event","OV","setState","initSession","subscribeToStreamCreated","connectToSession","token","console","log","connect","getToken","error","code","message","messgae","status","alert","clientData","then","connectWebCam","catch","getUserMedia","audioSource","videoSource","devices","getDevices","videoDevices","filter","device","kind","publisher","initPublisher","deviceId","publishAudio","isAudioActive","publishVideo","isVideoActive","resolution","frameRate","insertMode","capabilities","publish","on","updateSubscribers","setNickname","setConnectionId","connection","connectionId","setScreenShareActive","setStreamManager","subscribeToUserChanged","subscribeToStreamDestroyed","sendSignalUserChanged","isScreenShareActive","getStreamManager","e","videos","video","parentElement","classList","remove","nickname","getNickname","mySession","disconnect","setVideoActive","setAudioActive","deleteSubscriber","stream","remoteUsers","userStream","index","indexOf","splice","subscriber","subscribe","checkSomeoneShareScreen","newUser","setType","data","split","JSON","parse","push","setTimeout","preventDefault","forEach","getConnectionId","from","signalOptions","stringify","type","signal","fs","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","length","newVideoDevice","newPublisher","mirror","unpublish","navigator","userAgent","name","showExtensionDialog","once","isScreenShared","some","openviduLayoutOptions","setLayoutOptions","property","display","messageReceived","offsetWidth","render","createElement","className","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","sessionId","showNotification","showDialog","cancelClicked","handleNickname","map","sub","i","key","streamId","streamManager","style","close","createSession","createToken","response","post","customSessionId","headers"],"sources":["/home/ubuntu/Project-Agora/openvidu-call-react/src/components/VideoRoomComponent.js"],"sourcesContent":["import axios from 'axios';\nimport { OpenVidu } from 'openvidu-browser';\nimport React, { Component } from 'react';\nimport ChatComponent from './chat/ChatComponent';\nimport DialogExtensionComponent from './dialog-extension/DialogExtension';\nimport StreamComponent from './stream/StreamComponent';\nimport './VideoRoomComponent.css';\n\nimport OpenViduLayout from '../layout/openvidu-layout';\nimport UserModel from '../models/user-model';\nimport ToolbarComponent from './toolbar/ToolbarComponent';\n\nvar localUser = new UserModel();\nconst APPLICATION_SERVER_URL = process.env.NODE_ENV === 'production' ? 'http://localhost:5000/' : 'http://localhost:5000/';\n\n\nclass VideoRoomComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.hasBeenUpdated = false;\n        this.layout = new OpenViduLayout();\n        let sessionName = this.props.sessionName ? this.props.sessionName : 'SessionA';\n        let userName = this.props.user ? this.props.user : 'OpenVidu_User' + Math.floor(Math.random() * 100);\n        this.remotes = [];\n        this.localUserAccessAllowed = false;\n        this.state = {\n            mySessionId: sessionName,\n            myUserName: userName,\n            session: undefined,\n            localUser: undefined,\n            subscribers: [],\n            chatDisplay: 'none',\n            currentVideoDevice: undefined,\n        };\n\n        this.joinSession = this.joinSession.bind(this);\n        this.leaveSession = this.leaveSession.bind(this);\n        this.onbeforeunload = this.onbeforeunload.bind(this);\n        this.updateLayout = this.updateLayout.bind(this);\n        this.camStatusChanged = this.camStatusChanged.bind(this);\n        this.micStatusChanged = this.micStatusChanged.bind(this);\n        this.nicknameChanged = this.nicknameChanged.bind(this);\n        this.toggleFullscreen = this.toggleFullscreen.bind(this);\n        this.switchCamera = this.switchCamera.bind(this);\n        this.screenShare = this.screenShare.bind(this);\n        this.stopScreenShare = this.stopScreenShare.bind(this);\n        this.closeDialogExtension = this.closeDialogExtension.bind(this);\n        this.toggleChat = this.toggleChat.bind(this);\n        this.checkNotification = this.checkNotification.bind(this);\n        this.checkSize = this.checkSize.bind(this);\n    }\n\n    componentDidMount() {\n        const openViduLayoutOptions = {\n            maxRatio: 3 / 2, // The narrowest ratio that will be used (default 2x3)\n            minRatio: 9 / 16, // The widest ratio that will be used (default 16x9)\n            fixedRatio: false, // If this is true then the aspect ratio of the video is maintained and minRatio and maxRatio are ignored (default false)\n            bigClass: 'OV_big', // The class to add to elements that should be sized bigger\n            bigPercentage: 0.8, // The maximum percentage of space the big ones should take up\n            bigFixedRatio: false, // fixedRatio for the big ones\n            bigMaxRatio: 3 / 2, // The narrowest ratio to use for the big elements (default 2x3)\n            bigMinRatio: 9 / 16, // The widest ratio to use for the big elements (default 16x9)\n            bigFirst: true, // Whether to place the big one in the top left (true) or bottom right\n            animate: true, // Whether you want to animate the transitions\n        };\n\n        this.layout.initLayoutContainer(document.getElementById('layout'), openViduLayoutOptions);\n        window.addEventListener('beforeunload', this.onbeforeunload);\n        window.addEventListener('resize', this.updateLayout);\n        window.addEventListener('resize', this.checkSize);\n        this.joinSession();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onbeforeunload);\n        window.removeEventListener('resize', this.updateLayout);\n        window.removeEventListener('resize', this.checkSize);\n        this.leaveSession();\n    }\n\n    onbeforeunload(event) {\n        this.leaveSession();\n    }\n\n    joinSession() {\n        this.OV = new OpenVidu();\n\n        this.setState(\n            {\n                session: this.OV.initSession(),\n            },\n            async () => {\n                this.subscribeToStreamCreated();\n                await this.connectToSession();\n            },\n        );\n    }\n\n    async connectToSession() {\n        if (this.props.token !== undefined) {\n            console.log('token received: ', this.props.token);\n            this.connect(this.props.token);\n        } else {\n            try {\n                var token = await this.getToken();\n                console.log(token);\n                this.connect(token);\n            } catch (error) {\n                console.error('There was an error getting the token:', error.code, error.message);\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error getting the token:', error.message);\n            }\n        }\n    }\n\n    connect(token) {\n        this.state.session\n            .connect(\n                token,\n                { clientData: this.state.myUserName },\n            )\n            .then(() => {\n                this.connectWebCam();\n            })\n            .catch((error) => {\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error connecting to the session:', error.message);\n                console.log('There was an error connecting to the session:', error.code, error.message);\n            });\n    }\n\n    async connectWebCam() {\n        await this.OV.getUserMedia({ audioSource: undefined, videoSource: undefined });\n        var devices = await this.OV.getDevices();\n        var videoDevices = devices.filter(device => device.kind === 'videoinput');\n\n        let publisher = this.OV.initPublisher(undefined, {\n            audioSource: undefined,\n            videoSource: videoDevices[0].deviceId,\n            publishAudio: localUser.isAudioActive(),\n            publishVideo: localUser.isVideoActive(),\n            resolution: '640x480',\n            frameRate: 30,\n            insertMode: 'APPEND',\n        });\n\n        if (this.state.session.capabilities.publish) {\n            publisher.on('accessAllowed' , () => {\n                this.state.session.publish(publisher).then(() => {\n                    this.updateSubscribers();\n                    this.localUserAccessAllowed = true;\n                    if (this.props.joinSession) {\n                        this.props.joinSession();\n                    }\n                });\n            });\n\n        }\n        localUser.setNickname(this.state.myUserName);\n        localUser.setConnectionId(this.state.session.connection.connectionId);\n        localUser.setScreenShareActive(false);\n        localUser.setStreamManager(publisher);\n        this.subscribeToUserChanged();\n        this.subscribeToStreamDestroyed();\n        this.sendSignalUserChanged({ isScreenShareActive: localUser.isScreenShareActive() });\n\n        this.setState({ currentVideoDevice: videoDevices[0], localUser: localUser }, () => {\n            this.state.localUser.getStreamManager().on('streamPlaying', (e) => {\n                this.updateLayout();\n                publisher.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n        });\n    }\n\n    updateSubscribers() {\n        var subscribers = this.remotes;\n        this.setState(\n            {\n                subscribers: subscribers,\n            },\n            () => {\n                if (this.state.localUser) {\n                    this.sendSignalUserChanged({\n                        isAudioActive: this.state.localUser.isAudioActive(),\n                        isVideoActive: this.state.localUser.isVideoActive(),\n                        nickname: this.state.localUser.getNickname(),\n                        isScreenShareActive: this.state.localUser.isScreenShareActive(),\n                    });\n                }\n                this.updateLayout();\n            },\n        );\n    }\n\n    leaveSession() {\n        const mySession = this.state.session;\n\n        if (mySession) {\n            mySession.disconnect();\n        }\n\n        // Empty all properties...\n        this.OV = null;\n        this.setState({\n            session: undefined,\n            subscribers: [],\n            mySessionId: 'SessionA',\n            myUserName: 'OpenVidu_User' + Math.floor(Math.random() * 100),\n            localUser: undefined,\n        });\n        if (this.props.leaveSession) {\n            this.props.leaveSession();\n        }\n    }\n    camStatusChanged() {\n        localUser.setVideoActive(!localUser.isVideoActive());\n        localUser.getStreamManager().publishVideo(localUser.isVideoActive());\n        this.sendSignalUserChanged({ isVideoActive: localUser.isVideoActive() });\n        this.setState({ localUser: localUser });\n    }\n\n    micStatusChanged() {\n        localUser.setAudioActive(!localUser.isAudioActive());\n        localUser.getStreamManager().publishAudio(localUser.isAudioActive());\n        this.sendSignalUserChanged({ isAudioActive: localUser.isAudioActive() });\n        this.setState({ localUser: localUser });\n    }\n\n    nicknameChanged(nickname) {\n        let localUser = this.state.localUser;\n        localUser.setNickname(nickname);\n        this.setState({ localUser: localUser });\n        this.sendSignalUserChanged({ nickname: this.state.localUser.getNickname() });\n    }\n\n    deleteSubscriber(stream) {\n        const remoteUsers = this.state.subscribers;\n        const userStream = remoteUsers.filter((user) => user.getStreamManager().stream === stream)[0];\n        let index = remoteUsers.indexOf(userStream, 0);\n        if (index > -1) {\n            remoteUsers.splice(index, 1);\n            this.setState({\n                subscribers: remoteUsers,\n            });\n        }\n    }\n\n    subscribeToStreamCreated() {\n        this.state.session.on('streamCreated', (event) => {\n            const subscriber = this.state.session.subscribe(event.stream, undefined);\n            // var subscribers = this.state.subscribers;\n            subscriber.on('streamPlaying', (e) => {\n                this.checkSomeoneShareScreen();\n                subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n            const newUser = new UserModel();\n            newUser.setStreamManager(subscriber);\n            newUser.setConnectionId(event.stream.connection.connectionId);\n            newUser.setType('remote');\n            const nickname = event.stream.connection.data.split('%')[0];\n            newUser.setNickname(JSON.parse(nickname).clientData);\n            this.remotes.push(newUser);\n            if(this.localUserAccessAllowed) {\n                this.updateSubscribers();\n            }\n        });\n    }\n\n    subscribeToStreamDestroyed() {\n        // On every Stream destroyed...\n        this.state.session.on('streamDestroyed', (event) => {\n            // Remove the stream from 'subscribers' array\n            this.deleteSubscriber(event.stream);\n            setTimeout(() => {\n                this.checkSomeoneShareScreen();\n            }, 20);\n            event.preventDefault();\n            this.updateLayout();\n        });\n    }\n\n    subscribeToUserChanged() {\n        this.state.session.on('signal:userChanged', (event) => {\n            let remoteUsers = this.state.subscribers;\n            remoteUsers.forEach((user) => {\n                if (user.getConnectionId() === event.from.connectionId) {\n                    const data = JSON.parse(event.data);\n                    console.log('EVENTO REMOTE: ', event.data);\n                    if (data.isAudioActive !== undefined) {\n                        user.setAudioActive(data.isAudioActive);\n                    }\n                    if (data.isVideoActive !== undefined) {\n                        user.setVideoActive(data.isVideoActive);\n                    }\n                    if (data.nickname !== undefined) {\n                        user.setNickname(data.nickname);\n                    }\n                    if (data.isScreenShareActive !== undefined) {\n                        user.setScreenShareActive(data.isScreenShareActive);\n                    }\n                }\n            });\n            this.setState(\n                {\n                    subscribers: remoteUsers,\n                },\n                () => this.checkSomeoneShareScreen(),\n            );\n        });\n    }\n\n    updateLayout() {\n        setTimeout(() => {\n            this.layout.updateLayout();\n        }, 20);\n    }\n\n    sendSignalUserChanged(data) {\n        const signalOptions = {\n            data: JSON.stringify(data),\n            type: 'userChanged',\n        };\n        this.state.session.signal(signalOptions);\n    }\n\n    toggleFullscreen() {\n        const document = window.document;\n        const fs = document.getElementById('container');\n        if (\n            !document.fullscreenElement &&\n            !document.mozFullScreenElement &&\n            !document.webkitFullscreenElement &&\n            !document.msFullscreenElement\n        ) {\n            if (fs.requestFullscreen) {\n                fs.requestFullscreen();\n            } else if (fs.msRequestFullscreen) {\n                fs.msRequestFullscreen();\n            } else if (fs.mozRequestFullScreen) {\n                fs.mozRequestFullScreen();\n            } else if (fs.webkitRequestFullscreen) {\n                fs.webkitRequestFullscreen();\n            }\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n    }\n\n    async switchCamera() {\n        try{\n            const devices = await this.OV.getDevices()\n            var videoDevices = devices.filter(device => device.kind === 'videoinput');\n\n            if(videoDevices && videoDevices.length > 1) {\n\n                var newVideoDevice = videoDevices.filter(device => device.deviceId !== this.state.currentVideoDevice.deviceId)\n\n                if (newVideoDevice.length > 0) {\n                    // Creating a new publisher with specific videoSource\n                    // In mobile devices the default and first camera is the front one\n                    var newPublisher = this.OV.initPublisher(undefined, {\n                        audioSource: undefined,\n                        videoSource: newVideoDevice[0].deviceId,\n                        publishAudio: localUser.isAudioActive(),\n                        publishVideo: localUser.isVideoActive(),\n                        mirror: true\n                    });\n\n                    //newPublisher.once(\"accessAllowed\", () => {\n                    await this.state.session.unpublish(this.state.localUser.getStreamManager());\n                    await this.state.session.publish(newPublisher)\n                    this.state.localUser.setStreamManager(newPublisher);\n                    this.setState({\n                        currentVideoDevice: newVideoDevice,\n                        localUser: localUser,\n                    });\n                }\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    screenShare() {\n        const videoSource = navigator.userAgent.indexOf('Firefox') !== -1 ? 'window' : 'screen';\n        const publisher = this.OV.initPublisher(\n            undefined,\n            {\n                videoSource: videoSource,\n                publishAudio: localUser.isAudioActive(),\n                publishVideo: localUser.isVideoActive(),\n                mirror: false,\n            },\n            (error) => {\n                if (error && error.name === 'SCREEN_EXTENSION_NOT_INSTALLED') {\n                    this.setState({ showExtensionDialog: true });\n                } else if (error && error.name === 'SCREEN_SHARING_NOT_SUPPORTED') {\n                    alert('Your browser does not support screen sharing');\n                } else if (error && error.name === 'SCREEN_EXTENSION_DISABLED') {\n                    alert('You need to enable screen sharing extension');\n                } else if (error && error.name === 'SCREEN_CAPTURE_DENIED') {\n                    alert('You need to choose a window or application to share');\n                }\n            },\n        );\n\n        publisher.once('accessAllowed', () => {\n            this.state.session.unpublish(localUser.getStreamManager());\n            localUser.setStreamManager(publisher);\n            this.state.session.publish(localUser.getStreamManager()).then(() => {\n                localUser.setScreenShareActive(true);\n                this.setState({ localUser: localUser }, () => {\n                    this.sendSignalUserChanged({ isScreenShareActive: localUser.isScreenShareActive() });\n                });\n            });\n        });\n        publisher.on('streamPlaying', () => {\n            this.updateLayout();\n            publisher.videos[0].video.parentElement.classList.remove('custom-class');\n        });\n    }\n\n    closeDialogExtension() {\n        this.setState({ showExtensionDialog: false });\n    }\n\n    stopScreenShare() {\n        this.state.session.unpublish(localUser.getStreamManager());\n        this.connectWebCam();\n    }\n\n    checkSomeoneShareScreen() {\n        let isScreenShared;\n        // return true if at least one passes the test\n        isScreenShared = this.state.subscribers.some((user) => user.isScreenShareActive()) || localUser.isScreenShareActive();\n        const openviduLayoutOptions = {\n            maxRatio: 3 / 2,\n            minRatio: 9 / 16,\n            fixedRatio: isScreenShared,\n            bigClass: 'OV_big',\n            bigPercentage: 0.8,\n            bigFixedRatio: false,\n            bigMaxRatio: 3 / 2,\n            bigMinRatio: 9 / 16,\n            bigFirst: true,\n            animate: true,\n        };\n        this.layout.setLayoutOptions(openviduLayoutOptions);\n        this.updateLayout();\n    }\n\n    toggleChat(property) {\n        let display = property;\n\n        if (display === undefined) {\n            display = this.state.chatDisplay === 'none' ? 'block' : 'none';\n        }\n        if (display === 'block') {\n            this.setState({ chatDisplay: display, messageReceived: false });\n        } else {\n            console.log('chat', display);\n            this.setState({ chatDisplay: display });\n        }\n        this.updateLayout();\n    }\n\n    checkNotification(event) {\n        this.setState({\n            messageReceived: this.state.chatDisplay === 'none',\n        });\n    }\n    checkSize() {\n        if (document.getElementById('layout').offsetWidth <= 700 && !this.hasBeenUpdated) {\n            this.toggleChat('none');\n            this.hasBeenUpdated = true;\n        }\n        if (document.getElementById('layout').offsetWidth > 700 && this.hasBeenUpdated) {\n            this.hasBeenUpdated = false;\n        }\n    }\n\n    render() {\n        const mySessionId = this.state.mySessionId;\n        const localUser = this.state.localUser;\n        var chatDisplay = { display: this.state.chatDisplay };\n\n        return (\n            <div className=\"container\" id=\"container\">\n                <ToolbarComponent\n                    sessionId={mySessionId}\n                    user={localUser}\n                    showNotification={this.state.messageReceived}\n                    camStatusChanged={this.camStatusChanged}\n                    micStatusChanged={this.micStatusChanged}\n                    screenShare={this.screenShare}\n                    stopScreenShare={this.stopScreenShare}\n                    toggleFullscreen={this.toggleFullscreen}\n                    switchCamera={this.switchCamera}\n                    leaveSession={this.leaveSession}\n                    toggleChat={this.toggleChat}\n                />\n\n                <DialogExtensionComponent showDialog={this.state.showExtensionDialog} cancelClicked={this.closeDialogExtension} />\n\n                <div id=\"layout\" className=\"bounds\">\n                    {localUser !== undefined && localUser.getStreamManager() !== undefined && (\n                        <div className=\"OT_root OT_publisher custom-class\" id=\"localUser\">\n                            <StreamComponent user={localUser} handleNickname={this.nicknameChanged} />\n                        </div>\n                    )}\n                    {this.state.subscribers.map((sub, i) => (\n                        <div key={i} className=\"OT_root OT_publisher custom-class\" id=\"remoteUsers\">\n                            <StreamComponent user={sub} streamId={sub.streamManager.stream.streamId} />\n                        </div>\n                    ))}\n                    {localUser !== undefined && localUser.getStreamManager() !== undefined && (\n                        <div className=\"OT_root OT_publisher custom-class\" style={chatDisplay}>\n                            <ChatComponent\n                                user={localUser}\n                                chatDisplay={this.state.chatDisplay}\n                                close={this.toggleChat}\n                                messageReceived={this.checkNotification}\n                            />\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * --------------------------------------------\n     * GETTING A TOKEN FROM YOUR APPLICATION SERVER\n     * --------------------------------------------\n     * The methods below request the creation of a Session and a Token to\n     * your application server. This keeps your OpenVidu deployment secure.\n     *\n     * In this sample code, there is no user control at all. Anybody could\n     * access your application server endpoints! In a real production\n     * environment, your application server must identify the user to allow\n     * access to the endpoints.\n     *\n     * Visit https://docs.openvidu.io/en/stable/application-server to learn\n     * more about the integration of OpenVidu in your application server.\n     */\n    async getToken() {\n        const sessionId = await this.createSession(this.state.mySessionId);\n        return await this.createToken(sessionId);\n    }\n\n    async createSession(sessionId) {\n        const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions', { customSessionId: sessionId }, {\n            headers: { 'Content-Type': 'application/json', },\n        });\n        return response.data; // The sessionId\n    }\n\n    async createToken(sessionId) {\n        const response = await axios.post(APPLICATION_SERVER_URL + 'api/sessions/' + sessionId + '/connections', {}, {\n            headers: { 'Content-Type': 'application/json', },\n        });\n        return response.data; // The token\n    }\n}\nexport default VideoRoomComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}